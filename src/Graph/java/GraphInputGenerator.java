package Graph.java;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.List;
import javax.swing.Timer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;


public class GraphInputGenerator extends JPanel {
    protected int V;
    protected ArrayList<int[]> edges;
    protected Point[] positions;
    protected boolean[] articulationPoints;
    private boolean warnedEnemyOccupied = false;
    private boolean warnedArticulationReady = false;
    protected boolean isProcessing = false; // Tr·∫°ng th√°i x·ª≠ l√Ω duy·ªát kh·ªõp

    public GraphInputGenerator() {
        this.edges = new ArrayList<>();
        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                handleNodeClick(e.getPoint());
            }
        });
    }

    public void userInputGraphGUI() {
        JTextField vertexField = new JTextField(5);
        JPanel panel = new JPanel();
        panel.add(new JLabel("S·ªë ƒë·ªânh (3 - 35):"));
        panel.add(vertexField);

        SwingUtilities.invokeLater(() -> vertexField.requestFocusInWindow());

        int result = JOptionPane.showConfirmDialog(null, panel, "Nh·∫≠p th√¥ng tin ƒë·ªì th·ªã", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            try {
                int input = Integer.parseInt(vertexField.getText());

                if (input <= 2 || input >= 36) {
                    throw new IllegalArgumentException("S·ªë ƒë·ªânh ph·∫£i t·ª´ 3 - 35.");
                }

                V = input;
                edges.clear();
                autoGenerateTree();
                repaint();

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Vui l√≤ng nh·∫≠p m·ªôt s·ªë nguy√™n h·ª£p l·ªá!", "L·ªói",
                        JOptionPane.ERROR_MESSAGE);
                userInputGraphGUI();
            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "L·ªói",
                        JOptionPane.ERROR_MESSAGE);
                userInputGraphGUI();
            }
        } else {
            MenuGUI menu = new MenuGUI();
            menu.show();
        }
    }

    public void autoGenerateTree() {
        // Reset c·ªù
        warnedEnemyOccupied = false;
        warnedArticulationReady = false;

        // Sinh ng·∫´u nhi√™n c√¢y
        Random rand = new Random();
        V = (V == 0) ? rand.nextInt(8) + 14 : V;
        edges.clear();
        for (int i = 1; i < V; i++) {
            int parent = rand.nextInt(i);
            edges.add(new int[]{ parent, i });
        }

        // Tr∆∞·ªõc khi v·∫Ω ƒë·ªì th·ªã, hi·ªÉn th·ªã th√¥ng b√°o ·ªü gi·ªØa frame
        Window parent = SwingUtilities.getWindowAncestor(this);

        // ƒê·∫£m b·∫£o th√¥ng b√°o ƒë∆∞·ª£c hi·ªÉn th·ªã tr∆∞·ªõc khi v·∫Ω ƒë·ªì th·ªã
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                JOptionPane.showMessageDialog(
                    parent,
                    "<html><div style='text-align: center;'>‚ö†Ô∏è K·∫ª ƒë·ªãch ƒë√£ chi·∫øm ƒë√≥ng th√†nh ph·ªë!</div></html>",
                    "C·∫£nh b√°o",
                    JOptionPane.WARNING_MESSAGE
                );

                // T√≠nh v·ªã tr√≠ r·ªìi cho Swing queue v·∫Ω l·∫°i ngay
                generateTreePositions();
                repaint();

                // Sau khi panel ƒë√£ v·∫Ω xong (~500ms), m·ªõi b·∫Øt ƒë·∫ßu duy·ªát kh·ªõp
                Timer t = new Timer(500, new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        ((Timer)e.getSource()).stop();
                        // B·∫Øt ƒë·∫ßu duy·ªát kh·ªõp
                        findArticulationPointsAsync();
                    }
                });
                t.setRepeats(false);
                t.start();
            }
        });
    }


    private void generateTreePositions() {
        positions = new Point[V];
        int frameWidth = 800;
        int frameHeight = 600;
        int levelGap = 100;

        Map<Integer, List<Integer>> treeLevels = new HashMap<>();
        treeLevels.put(0, new ArrayList<>(Arrays.asList(0)));

        for (int[] edge : edges) {
            int child = edge[1];
            int level = (int) (Math.log(child + 1) / Math.log(2));
            treeLevels.putIfAbsent(level, new ArrayList<>());
            treeLevels.get(level).add(child);
        }

        int totalHeight = treeLevels.size() * levelGap;
        int startY = (frameHeight - totalHeight) / 2;

        for (Map.Entry<Integer, List<Integer>> entry : treeLevels.entrySet()) {
            int level = entry.getKey();
            List<Integer> nodes = entry.getValue();

            int siblingGap = Math.max(50, frameWidth / (nodes.size() + 1));
            int totalWidth = siblingGap * (nodes.size() - 1);
            int startX = (frameWidth - totalWidth) / 2;

            for (int i = 0; i < nodes.size(); i++) {
                positions[nodes.get(i)] = new Point(startX + i * siblingGap, startY + level * levelGap);
            }
        }
    }

    private void findArticulationPointsAsync() {
        isProcessing = true; // üëâ B·∫Øt ƒë·∫ßu duy·ªát, ch·∫∑n thao t√°c

        SwingWorker<Void, Integer> worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                articulationPoints = new boolean[V];
                int[] disc = new int[V];
                int[] low = new int[V];
                boolean[] visited = new boolean[V];
                int[] time = {0};

                List<List<Integer>> adj = new ArrayList<>();
                for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
                for (int[] edge : edges) {
                    adj.get(edge[0]).add(edge[1]);
                    adj.get(edge[1]).add(edge[0]);
                }

                for (int i = 0; i < V; i++) {
                    if (!visited[i]) {
                        dfsAnimated(i, -1, visited, disc, low, time, adj);
                    }
                }

                return null;
            }

            private void dfsAnimated(int u, int parent, boolean[] visited, int[] disc, int[] low, int[] time, List<List<Integer>> adj) {
                visited[u] = true;
                disc[u] = low[u] = ++time[0];
                int children = 0;

                for (int v : adj.get(u)) {
                    if (v == parent) continue;

                    if (!visited[v]) {
                        children++;
                        dfsAnimated(v, u, visited, disc, low, time, adj);
                        low[u] = Math.min(low[u], low[v]);

                        boolean isArticulation = false;
                        if (parent == -1 && children > 1) isArticulation = true;
                        if (parent != -1 && low[v] >= disc[u]) isArticulation = true;

                        if (isArticulation) {
                            articulationPoints[u] = true;
                            publish(u);
                            try {
                                Thread.sleep(500); // Hi·ªáu ·ª©ng
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                    } else {
                        low[u] = Math.min(low[u], disc[v]);
                    }
                }
            }

            @Override
            protected void process(List<Integer> chunks) {
                repaint();
            }

            @Override
            protected void done() {
                isProcessing = false; // üëâ K·∫øt th√∫c duy·ªát, cho thao t√°c l·∫°i

                if (!warnedArticulationReady) {
                    warnedArticulationReady = true;
                    JOptionPane.showMessageDialog(null,
                            "üõ°Ô∏è To√†n b·ªô Phi·∫øn Qu√¢n Ki·∫øn ph·∫£n ƒë√£ l·ªô di·ªán!\nNg∆∞·ªùi ch∆°i, h√£y chi·∫øn ƒë·∫•u v√† b·∫£o v·ªá V∆∞∆°ng Qu·ªëc Ki·∫øn!");
                }
            }
        };

        worker.execute();
    }

    protected void handleNodeClick(Point click) {
        if (isProcessing) {
            JOptionPane.showMessageDialog(null,
                "‚õî Ki·∫øn Ph·∫£n ƒê·ªông ƒëang x√¢m chi·∫øm b·∫£n ƒë·ªì!\nVui l√≤ng ch·ªù ho√†n t·∫•t tr∆∞·ªõc khi thao t√°c.");
            return;
        }

        for (int i = 0; i < V; i++) {
            if (positions[i].distance(click) <= 30) {
                if (articulationPoints[i]) {
                    removeNode(i);
                    JOptionPane.showMessageDialog(null, "‚úÖ ƒê√£ ti√™u di·ªát Phi·∫øn Qu√¢n Ki·∫øn " + i);

                    if (noArticulationPointsLeft()) {
                        JOptionPane.showMessageDialog(null,
                            "üéâ Cu·ªôc chi·∫øn ƒë√£ k·∫øt th√∫c! Kh√¥ng c√≤n t·ªï ƒë·ªãch n√†o n·ªØa.");
                        String[] options = {"Quay v·ªÅ Menu", "Ch∆°i l·∫°i"};
                        int choice = JOptionPane.showOptionDialog(null,
                            "B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?", "Chi·∫øn th·∫Øng!",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,
                            null, options, options[0]);

                        if (choice == 0) {
                            MenuGUI menu = new MenuGUI();
                            menu.show();
                        } else if (choice == 1) {
                            autoGenerateTree();
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null,
                        "üö´ T·ªï " + i + " kh√¥ng ph·∫£i l√† T·ªï Ki·∫øn Ph·∫£n ƒê·ªông!",
                        "C·∫£nh b√°o!", JOptionPane.ERROR_MESSAGE);
                }
                return;
            }
        }
    }

    private boolean noArticulationPointsLeft() {
        for (boolean ap : articulationPoints) {
            if (ap) return false;
        }
        return true;
    }

    private void removeNode(int node) {
        edges.removeIf(edge -> edge[0] == node || edge[1] == node);
        findArticulationPointsAsync();
    }
}
